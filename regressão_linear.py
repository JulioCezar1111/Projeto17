# -*- coding: utf-8 -*-
"""Regressão_Linear.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1q33sL0hGjLVUlGg7Ix5aJrBLXEgwXCwv

# **Importar bibliotecas**
"""

from matplotlib import pyplot as plt # Plotar os graficos
import pandas as pd # Analise de tabelas para tratamento dos dados
import pylab as pl # Analise dos graficos 
import numpy as np # Contem funçoes matematicas avançadas 
from sklearn import linear_model # Modelo de regressão linear
from sklearn.metrics import r2_score, mean_squared_error, mean_absolute_error # Metricas
from sklearn.model_selection import train_test_split # Para criar os dataset (treino e teste)
from math import sqrt

"""# **Download do Dataset**"""

!pip3 install wget # Propicia o download de dados da web
!wget https://raw.githubusercontent.com/diogocortiz/Curso-IA-para-todos/master/RegressaoLinear/FuelConsumptionCo2.csv

"""# **Carregar Dataset para um Dataframe (pandas)**"""

# Criar um Dataframe chamado 'df' que receberá os dados do csv
df = pd.read_csv('/content/FuelConsumptionCo2.csv')

# Exibir o Dataframe
display(df.head()) # head() mostra somente 5 linhas da tabela

"""# **Exibir o resumo do Dataset**"""

display(df.describe())

"""# **Selecionar na tabela a coluna do motor e CO2**"""

# Selecionando as colunas desejadas:
motores_df = df[['ENGINESIZE']]
emissor_co2_df = df[['CO2EMISSIONS']]

# Visualizar as colunas desejaveis
display(motores_df.head(), emissor_co2_df.head())

"""# **Dividir o dataset em dados de treinamento e dados de teste**

***Neste caso vamos usar o train_test_split do scikitlearn***

train_test_split('Dataframe', 'Dataframe_2', test_size = % que ele pega do df, random_state = 42) random_state = 42 é necessario para pegar somente o mesmo dados de teste
"""

motores_train_df, motores_test_df, co2_train_df, co2_test_df = train_test_split(motores_df, emissor_co2_df, test_size= 0.2, random_state = 42)

"""# **Exibir a correlação entre as features do dataset de treinamento**

**plt.scatter('dataframe no eixo x', 'dataframe no eixo y', 'a cor dos pontos')**

**plt.xlabel('a legenda do grafico no eixo x')**

**plt.ylabel('a legenda do grafico no eixo y')**
"""

plt.scatter(motores_train_df, co2_train_df, color = 'green')
plt.xlabel('Motor')
plt.ylabel('Emissão de CO2')
plt.show()

"""# **Treinar o modelo de regressão linear**"""

# Criar o modelo de regressão linear
modelo = linear_model.LinearRegression()

''' Treinar o modelo usando os dataframe de treino
    Para encontrar o valor de A e B (y = A + B.x) '''
modelo.fit(motores_train_df, co2_train_df) # Metodo de treinamento

"""# **Visualizar os coeficientes(A e B)**"""

a = modelo.intercept_
b = modelo.coef_
print(f'(A) Intercepto: {a.round(2)}')
print(f'(B) Inclinação: {b.round(2)}')

"""# **Visualizar a reta de regressão no dataframe de treino**

plt.plot('variavel no eixo x', 'função', é a cor da linha '-r')
"""

plt.scatter(motores_train_df, co2_train_df, color = 'green')
plt.xlabel('Motor')
plt.ylabel('Emissão de CO2')
funcao = modelo.coef_[0][0] * motores_train_df + modelo.intercept_[0]
plt.plot(motores_train_df, funcao , '-r')
plt.show()

"""# **Execultar o modelo no dataframe de teste**"""

# Primeiro a gente tem que fazer as predições usando o modelo e base de teste
predicao_co2 = modelo.predict(motores_test_df)

"""# **Visualizar a reta de regressão no dataframe de teste**"""

plt.scatter(motores_test_df, co2_test_df, color = 'black')
plt.xlabel('Motor')
plt.ylabel('Emissão de CO2')
funcao = modelo.coef_[0][0] * motores_test_df + modelo.intercept_[0]
plt.plot(motores_test_df, funcao , '-b')
plt.show()

"""# **Avaliar o modelo**"""

# Modelo
print(f'y = {a[0].round(2)} + {b[0, 0].round(2)}.x')
print('')

# Mostrar as metricas
residuo = predicao_co2 - co2_test_df
mse = mean_squared_error(predicao_co2, co2_test_df)
mae = mean_absolute_error(predicao_co2, co2_test_df)
rmse = sqrt(mse)
r2 = r2_score(predicao_co2, co2_test_df)

print(f'Soma dos erros ao quadrado (SSE): {np.sum(residuo ** 2).round(2)}')
print(f'Erro quadrático médio (MSE): {mse.round(2)}')
print(f'Erro médio absoluto (MAE): {mae.round(2)}')
print(f'Raiz do erro quadrático médio (RMSE): %.2f' %rmse)
print(f'R²-score: {r2.round(2)}')